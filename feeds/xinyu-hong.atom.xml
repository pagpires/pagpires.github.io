<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Hong's Blog</title><link href="https://pagpires.github.io/" rel="alternate"></link><link href="https://pagpires.github.io/feeds/xinyu-hong.atom.xml" rel="self"></link><id>https://pagpires.github.io/</id><updated>2017-03-20T00:00:00-04:00</updated><entry><title>Building An AI Assistant by WeChat</title><link href="https://pagpires.github.io/building-an-ai-assistant-by-wechat.html" rel="alternate"></link><published>2017-03-20T00:00:00-04:00</published><author><name>Xinyu Hong</name></author><id>tag:pagpires.github.io,2017-03-20:building-an-ai-assistant-by-wechat.html</id><summary type="html">&lt;p&gt;After watching Zuckerberg's Jarvis, I've been thinking about creating my own AI assistant. Although Zuckerberg's whole project seemed marvellous, the technology that he implemented in each module is actually mature and achievable. As he mentioned, the most difficult part was to integrate all the interfaces of the connected things into one processor. In my opinion, the AI assistant consists of three parts: controller (front-end), processor (logic), controllee (the object you want to send your command to). Zuckerberg built an App as the controller but personally I think there must be something already available for us. Basically, we can use PC as the processor to control the connected things, and we just need something that is capable to send commands from our cell phone to PC.&lt;/p&gt;
&lt;p&gt;Then I encountered this package: &lt;a href="https://github.com/littlecodersh/ItChat"&gt;ItChat&lt;/a&gt;, and I believe it will do exactly what I want. WeChat is a chat App that is very popular in China. The ItChat package's core function is to use PC to monitor the messages of your WeChat account. The mechanism under the hood is simple: you can log into web-WeChat on PC via scanning the QR code using your phone, then PC will have the message flow and you will find some way to monitor it. Then, you can set up some rules like: if (message == command): do something. That's it! You can now control the electronics via sending commands through WeChat, as long as your PC is monitoring your WeChat message and your PC can send commands to the electronics of interest.&lt;/p&gt;
&lt;p&gt;In the end, I successfully implemeted a printer mode in WeChat, which controls my home printer to print out whatever content I send. Here is how I achieved it.
You need:
1. WeChat account
2. A computer (with python 2.7 installed, with python package win32api installed)
3. A connected printer&lt;/p&gt;
&lt;p&gt;First you &lt;code&gt;pip install itchat&lt;/code&gt; to install the package. Then in the python script you &lt;code&gt;import itchat&lt;/code&gt; and &lt;code&gt;from itchat.content import *&lt;/code&gt;. The latter provides different types of WeChat message you want to monitor (like TEXT, IMAGE, NOTE, etc). In order to call printer from python, you also need to &lt;code&gt;import win32api&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next you 'register' your own function, which is to execute your function in response to certain WeChat message. The registration is achieved via a provided decorator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main_list&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    
    &lt;span class="nd"&gt;@itchat.msg_register&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CARD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NOTE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SHARING&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;STATUS&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ToUserName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;filehelper&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;welcome_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;可进入模式:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;{}({})&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fun_dict_ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
            &lt;span class="n"&gt;itchat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_msg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;welcome_message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;filehelper&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;fun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fun_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;STATUS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;itchat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_msg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;进入打印模式。请输入打印内容。&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Entering {} mode, pls send the content you want to print.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;filehelper&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;itchat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_msg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;您现在在主菜单模式。请输入&amp;#39;H&amp;#39;获得帮助。&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;You are at MAIN mode. Pls type &amp;#39;H&amp;#39; for options.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;filehelper&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here showed is the function I used to implement the 'main page', which gives a welcome message and prompts for mode options. The usage to bind WeChat message monitor to specific action is simply using &lt;code&gt;@itchat.msg_register([CONTENT])&lt;/code&gt;, note that the content are the types imported from &lt;code&gt;itchat.CONTENT&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this implementation, I designed an interactive schema, which first contains 'main page', then ask for different options to enter different 'modes'. To achieve this you will have to register different functions according to different options. However, by default code will regard the last registered function as the valid one. Then here's my TRICK: use a variable &lt;code&gt;STATUS&lt;/code&gt; to indicate which mode you are at right now, and put everything except the function definitions into an infinite loop, inside which we register a certain function according to the STATUS every 0.1s.&lt;/p&gt;
&lt;p&gt;The next is the 'printer' function, which receives a message and call the printer to print it. YOu can achieve this by &lt;code&gt;win32api&lt;/code&gt;. Basically you store the received message into a temp file, then call &lt;code&gt;win32api.ShellExecute&lt;/code&gt; to execute a print action. Please see &lt;a href="http://timgolden.me.uk/python/win32_how_do_i/print.html"&gt;this tutorial&lt;/a&gt; for details. Note that it may fail if the file format of the temp file is not recognized OR is configured to be opened by a customized App (e.g. use notepad++ as the default for .txt files).&lt;/p&gt;
&lt;p&gt;This toy project is simple but very interesting. Basically you can use it to control every web-connected electronics. This &lt;a href="https://www.youtube.com/watch?v=dS7yqTH0w6A"&gt;video&lt;/a&gt; shows how it looks like in the end. Have fun!&lt;/p&gt;
&lt;p&gt;Future directions:
I will implement a 'music player' mode in the near future, which controls the Bose Soundlink at my home to play whatever music I ask. I am also considering implementing a 'surveillance' mode, which receives pictures through a webcam and recognize the people and actions in it, and notify me either when friends are visiting or when someone is stealing packages.&lt;/p&gt;</summary><category term="IoT"></category></entry><entry><title>2017 New Year Resolution</title><link href="https://pagpires.github.io/2017-new-year-resolution.html" rel="alternate"></link><published>2017-01-17T00:00:00-05:00</published><author><name>Xinyu Hong</name></author><id>tag:pagpires.github.io,2017-01-17:2017-new-year-resolution.html</id><summary type="html">&lt;p&gt;2016 has passed. It is a year that means a lot to me. I failed two projects in my research and had a very hard time; I made a breakthrough with my proviously-considered-dead-ended project. Most importantly, I made up my mind to pursue another career path and started somewhat systematic training. I touched database system, front-end programming, interactive data vizualization, deep learning and now I feel I'm ready to make something. Here are my 2017 resolutions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deep learning courses&lt;ol&gt;
&lt;li&gt;&lt;a href="http://cs231n.github.io/"&gt;Stanford's cs231n&lt;/a&gt; (Computer Vision, focus on CNN)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cs224d.stanford.edu/syllabus.html"&gt;Stanford's cs224d&lt;/a&gt; (Natural language processing, focus on RNN)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www0.cs.ucl.ac.uk/staff/d.silver/web/Teaching.html"&gt;UCL's Reinforment Learning&lt;/a&gt; (by DeepMind's David Silver)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://edge.edx.org/courses/course-v1:BerkeleyX+CS188x-SP16+SP16/info"&gt;UCBerkeley's cs188&lt;/a&gt; (General AI course)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://courses.cs.washington.edu/courses/cse512/16sp/"&gt;UW's CSE512&lt;/a&gt; (Data vizualization by D3 creator Jeffry Heer)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Projects/Applications&lt;ol&gt;
&lt;li&gt;CNN: video face detection. Video in, friends' info out.&lt;/li&gt;
&lt;li&gt;RNN: haven't decided yet, need to spend some time on cs224d and see if there's anything interesting&lt;/li&gt;
&lt;li&gt;RL: "Sheng-ji" bot player&lt;/li&gt;
&lt;li&gt;Data Viz (to be determined)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P.S.
After one year of exposure to data science, I find it actually has a lot in common with my work: biological research: 1) both requires you to spend a lot of time to find out the right way to address the right question; 2) techniques are important, but most of the labs/companys use well-defined techniques and the harder part is to rationalize your choice of technique; 3) (therefore,) both requires you to be a good communicator and 4) (many times) you will need different ways (aspects) to make the same argument.&lt;/p&gt;</summary><category term="New Year Resolution"></category></entry><entry><title>Styling of the blog using theme 'elegant' with modifications</title><link href="https://pagpires.github.io/styling-of-the-blog-using-theme-elegant-with-modifications.html" rel="alternate"></link><published>2016-09-11T00:00:00-04:00</published><author><name>Xinyu Hong</name></author><id>tag:pagpires.github.io,2016-09-11:styling-of-the-blog-using-theme-elegant-with-modifications.html</id><summary type="html">&lt;p&gt;I was looking for a pelican theme that was simple and elegant enough so that both readers and I can focus more on the blog content. The pelican theme &lt;a href="http://oncrashreboot.com/elegant-best-pelican-theme-features"&gt;'elegant'&lt;/a&gt; partially satisfied my needs but I was not quite happy with the font.&lt;/p&gt;
&lt;p&gt;Until I saw Edward Tufte published the &lt;a href="https://edwardtufte.github.io/tufte-css/"&gt;'Tufte CSS'&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I came across those famous ET's books when I was a 2nd-year grad student. My PI always emphasized to us the importance of effective scientific communication. Therefore unsurprisingly we had all kinds of ET's books on data visualization as well as some others' work on scientific writing. I read his books and started to know a research field/discipline called data visualization and became more and more interested in it. Also, I really liked the styling in his books, the simplicity, the carefully chosen typography and the famous 'no more than 3 levels of headings'. &lt;/p&gt;
&lt;p&gt;Therefore I changed some of the font-family in 'elegant' to those 'tufte fonts'. You basically go to your blog and inspect-element on the writings with those fonts you don't like, and then search for these fonts in base.html file in your theme folder and replace them. &lt;/p&gt;
&lt;p&gt;Some tweaks to set up 'elegant' theme:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Plugins&lt;br /&gt;
This theme support a search bar, which requires plugin &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/tipue_search"&gt;'tipue_search'&lt;/a&gt; and &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/sitemap"&gt;'sitemap'&lt;/a&gt;. You need to download &lt;code&gt;tipue_search&lt;/code&gt; and &lt;code&gt;sitemap&lt;/code&gt; plugins and specify them in your pelican configuration file.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Template pages&lt;br /&gt;
By default this theme creates additional static pages like &lt;code&gt;404.html&lt;/code&gt; and &lt;code&gt;search.html&lt;/code&gt;. You need to specify them by adding&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_PAGES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;themePATH/elegant/templates/404.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;404.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;themePATH/elegant/templates/search.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;search.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;into your configuation file.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Links 'undefined'&lt;br /&gt;
If you see all the search results are associated with 'undefined' links, check this &lt;a href="https://github.com/talha131/pelican-elegant/issues/147"&gt;issue&lt;/a&gt; . The easiest hack is to edit tipue_search.py and add &lt;code&gt;'loc': page_url&lt;/code&gt; to the &lt;code&gt;node =&lt;/code&gt; dicts in both &lt;code&gt;def create_tpage_node&lt;/code&gt; and &lt;code&gt;def create_json_node&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="practice"></category></entry><entry><title>Practice of interactive bargraph</title><link href="https://pagpires.github.io/practice-of-interactive-bargraph.html" rel="alternate"></link><published>2016-08-27T00:00:00-04:00</published><author><name>Xinyu Hong</name></author><id>tag:pagpires.github.io,2016-08-27:practice-of-interactive-bargraph.html</id><summary type="html">&lt;p&gt;Here below is my practice of interactive bargraph. Here are several features that I've introduced:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data-based color&lt;/li&gt;
&lt;li&gt;Highlighting of the mouse-hovered bar, smooth transition&lt;/li&gt;
&lt;li&gt;A tooltip with a position defined by the mouse-hovered bar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I basically followed the &lt;a href="http://chimera.labs.oreilly.com/books/1230000000345/ch10.html"&gt;tutorial&lt;/a&gt; written by Scott Murray.&lt;/p&gt;
&lt;style type="text/css"&gt;
    .axis text{
      font-family: sans-serif;
      font-size: 11px;
    }
    .axis path, 
    .axi line{
      fill: none;
      stroke: black;
      shape-rendering: crispEdges;
    }
    svg rect .hightlight{
      fill: orange;
    }

    #tooltip {
        position: absolute;
        width: 200px;
        height: auto;
        padding: 10px;
        background-color: white;
        -webkit-border-radius: 10px;
        -moz-border-radius: 10px;
        border-radius: 10px;
        -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        -moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        pointer-events: none;
      }

      #tooltip.hidden {
        display: none;
      }

      #tooltip p {
        margin: 0;
        font-family: sans-serif;
        font-size: 16px;
        line-height: 20px;
      }

      h3 {
        text-align: center;
        font-family: sans-serif;
      }
&lt;/style&gt;

&lt;div id="barGraph"&gt;
  &lt;h3&gt;Practice of interactive bargraph design&lt;/h3&gt;
  &lt;div id="tooltip" class="hidden"&gt;
    &lt;p&gt;The value of this category&lt;/p&gt;
    &lt;p&gt;&lt;span id="value"&gt;100&lt;/span&gt;%&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script type="text/javascript" src="https://d3js.org/d3.v3.min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
    var width = 500, 
        height = 300, 
        xPadding = 25, 
        yPadding = 15;
  var numN = 20,
      numRange = 100;
  var numList = [];
  for (var i=0; i&lt;numN; i++){
    numList.push(Math.floor(Math.random()*numRange));
  }

  //scale
  var xScale = d3.scale.linear()
      .domain([0, numList.length])
      .range([0, width-2*xPadding]);
  var yScale = d3.scale.linear()
      .domain([0, d3.max(numList)])
      .range([0, height-2*xPadding]);
  var colScale = d3.scale.linear()
      .domain([0, d3.max(numList)])
      .range([50, 255]);
    //draw bars
    var barWidth = (width-xPadding*2)/numN*0.7;
  var svg = d3.select("div#barGraph").append("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("id", "canvas");
  svg.selectAll("g")
      .data(numList)
      .enter()
      .append("g")
      .attr("transform", "translate("+xPadding+","+yPadding+")")
      .append("rect")
      .attr("width", barWidth)          
      .attr("x", function(d,i){
        return xScale(i);
      })
      .attr("y", function(d){
        return height-yPadding-yScale(d);
      })
      .attr("height", function(d) {
        return yScale(d);
      })
      .attr("fill", function(d){
        return "rgb(0,0,"+Math.floor(colScale(d))+")";
        });

      //text
      svg.selectAll("g")
          .append("text")
          .text(function(d){
            return d;
          })
          .attr("x", function(d,i) {
            return xScale(i)+barWidth/2;
          })
          .attr("y", function(d){
            return height-yPadding-yScale(d)+10;
          })
          .attr("fill", "white")
          .attr("text-anchor","middle")
          .attr("font-family","sans-serif")
          .attr("font-size","11px")
      //axis
      // var yAxis = d3.svg.axis()
      //     .scale(yScale)
      //     .orient("left")
      //     .ticks(5);
      // svg.append("g")
      //     .attr("class","axis")
      //     .attr("transform","translate("+xPadding+","+4*yPadding+")")
      //     .call(yAxis);

      //interactivity: highlight
      var offsetX = document.getElementById('barGraph').offsetLeft;
      var offsetY = document.getElementById('barGraph').offsetTop;
      svg.selectAll("g")
          .on("mouseover",function(d){

            var elemSelect = d3.select(this).select("rect");
            elemSelect.attr("fill","orange");
            var point = d3.mouse(this),
                xPosition = +elemSelect.attr("x"),
                yPosition = +elemSelect.attr("y")-10;


            var tooltip = d3.select('div#barGraph').select('#tooltip');
            tooltip.style("left", (offsetX+xPosition)+"px")
                .style("top", (offsetY+ yPosition)+"px");
            tooltip.select("#value").text(d);
            tooltip.classed("hidden", false);
          })
          .on("mouseout", function(){
            d3.select(this).select("rect")
                .transition()
                .duration(250)
                .attr("fill", function(d){
                  return "rgb(0,0,"+Math.floor(colScale(d))+")";
                })
            d3.select("#tooltip").classed("hidden", true);

          });
&lt;/script&gt;

&lt;hr /&gt;
&lt;p&gt;Tips:&lt;br /&gt;
Direct copy-pasting of the vis code into markdown will cause problems.&lt;br /&gt;
First you want to avoid selection based on 'body'. Generally you can &lt;strong&gt;create a 'div' with an id inside 'body'&lt;/strong&gt; to make it work. Additionally, in this vis, when creating the tooltip and assign it with the x,y-coordinates of the bar you've hovered, you need to get the position of the whole 'div' where your vis resides. You then use this position as a offset and add it to the bar position, to calculate the position of your tooltip. Without this offset, your tooltip will appear on the top left of the whole webpage, rather than that of the vis, since the tooltip position is 'absolute'.&lt;/p&gt;</summary><category term="practice"></category></entry><entry><title>It's just a curve</title><link href="https://pagpires.github.io/its-just-a-curve.html" rel="alternate"></link><published>2016-08-12T00:00:00-04:00</published><author><name>Xinyu Hong</name></author><id>tag:pagpires.github.io,2016-08-12:its-just-a-curve.html</id><summary type="html">&lt;p&gt;After trying different tools for my blogging system, I eventually settled with &lt;strong&gt;Markdown&lt;/strong&gt; + &lt;strong&gt;pelican&lt;/strong&gt; + &lt;strong&gt;github page&lt;/strong&gt;. Here are my reasons.&lt;/p&gt;
&lt;h5&gt;Markdown&lt;/h5&gt;
&lt;p&gt;I need a system to write easily. WordPress and Markdown are my choices however Markdown has a better geeky flavor. More importantly, I will integrate the interactive data visualization into the webpage. WordPress can do this with some plugins however it doesn't support JSON to be upload, therefore I would have to upload my data source in my server while uploading the CSS and JS script to WordPress, which is annoying. After I saw this &lt;a href="http://www.nicksuch.com/2014/03/26/d3-sample/"&gt;blog&lt;/a&gt;, it became very natural that Markdown is &lt;em&gt;the choice&lt;/em&gt; to me.&lt;/p&gt;
&lt;h5&gt;Pelican&lt;/h5&gt;
&lt;p&gt;Choosing Markdown for blogging I will need a tool to generate static web pages. Since I plan to write some data analysis reports and to record my progress in &lt;a href="https://www.kaggle.com/"&gt;Kaggle&lt;/a&gt; every once a while, I will often use ipython notebook and integrate it into my blog. Then &lt;a href="http://docs.getpelican.com/en/3.6.3/"&gt;Pelican&lt;/a&gt;, a python-based tool for generating static web pages, seems to serve that role, especially after I saw this &lt;a href="https://www.dataquest.io/blog/how-to-setup-a-data-science-blog/"&gt;tutorial&lt;/a&gt; for setting up a data science blog.&lt;/p&gt;
&lt;h5&gt;GitHub&lt;/h5&gt;
&lt;p&gt;Choosing GitHub is just to add some more geeky flavor to this blog. This might also force me to be familiar with project version control, which is an essential skill to me.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Basically that's how I ended up with these three gadgets for my blogging system. Either in terms of proficiency of these three tools, or in terms of skillfulness in the data science field that I'm going to cover in this blog, I'm both a newbie. However, for a systematically trained scientist-to-be like me, nothing can be hard after some dedicated time and efforts. It's just a learning curve, isn't it?&lt;/p&gt;</summary><category term="thoughts"></category></entry></feed>